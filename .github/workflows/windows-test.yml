name: Windows MCP Server Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-windows:
    name: Test on ${{ matrix.os }} - Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false  # Continue testing other combinations if one fails
      matrix:
        os: [windows-2019, windows-2022]
        node-version: [16, 18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Display environment info
      run: |
        echo "Node version:"
        node --version
        echo "NPM version:"
        npm --version
        echo "Windows version:"
        systeminfo | findstr /B /C:"OS Name" /C:"OS Version"
        echo "Current directory:"
        pwd
    
    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
      env:
        GITHUB_ACTIONS: true
        CI: true
    
    - name: Build TypeScript
      run: |
        npm run build
      env:
        GITHUB_ACTIONS: true
        CI: true
    
    - name: Run unit tests
      run: |
        npm test
      continue-on-error: true  # Continue even if tests fail to get all logs
      env:
        GITHUB_ACTIONS: true
        CI: true
        NODE_ENV: test
    
    - name: Test MCP protocol communication
      run: |
        node test-comprehensive.js
      continue-on-error: true
    
    - name: Test tool layered architecture
      run: |
        node test-layered-tools.js
      continue-on-error: true
    
    - name: Test global npm installation
      run: |
        echo "Creating npm package..."
        npm pack
        
        echo "Installing globally..."
        npm install -g rough-cut-mcp-*.tgz
        
        echo "Testing global installation..."
        # Create a test script to verify the global installation works
        @"
        const { spawn } = require('child_process');
        const path = require('path');
        
        // Try to find the installed MCP server
        const mcpPath = path.join(
          process.env.APPDATA || process.env.HOME,
          'npm/node_modules/rough-cut-mcp/build/index.js'
        );
        
        console.log('Testing MCP server at:', mcpPath);
        
        const child = spawn('node', [mcpPath], {
          stdio: ['pipe', 'pipe', 'pipe']
        });
        
        let output = '';
        child.stdout.on('data', (data) => {
          output += data.toString();
        });
        
        child.stderr.on('data', (data) => {
          console.error('Stderr:', data.toString());
        });
        
        // Send initialization request
        setTimeout(() => {
          const initRequest = JSON.stringify({
            jsonrpc: '2.0',
            id: 1,
            method: 'initialize',
            params: {
              protocolVersion: '2024-11-05',
              capabilities: {},
              clientInfo: { name: 'test', version: '1.0.0' }
            }
          });
          child.stdin.write(initRequest + '\n');
        }, 1000);
        
        // Check for response
        setTimeout(() => {
          if (output.includes('jsonrpc')) {
            console.log('SUCCESS: MCP server responded to initialization');
            process.exit(0);
          } else {
            console.error('FAILED: No JSON-RPC response received');
            console.log('Output received:', output);
            process.exit(1);
          }
        }, 3000);
        "@ | Out-File -FilePath test-global-install.js -Encoding UTF8
        
        node test-global-install.js
    
    - name: Test Windows-specific paths and check for WSL paths
      run: |
        # Test that Windows paths work correctly and NO WSL paths exist
        @"
        const path = require('path');
        const fs = require('fs');
        
        console.log('Testing Windows path handling...');
        
        // Test paths with spaces
        const testPath = 'D:\\MY PROJECTS\\Test Path\\file.js';
        console.log('Normalized path:', path.normalize(testPath));
        console.log('Parsed path:', path.parse(testPath));
        
        // Test current working directory
        console.log('CWD:', process.cwd());
        
        // Test build directory exists
        const buildPath = path.join(process.cwd(), 'build');
        if (fs.existsSync(buildPath)) {
          console.log('Build directory exists:', buildPath);
          const files = fs.readdirSync(buildPath);
          console.log('Build files:', files);
        } else {
          console.error('Build directory not found!');
          process.exit(1);
        }
        "@ | Out-File -FilePath test-windows-paths.js -Encoding UTF8
        
        node test-windows-paths.js
        
        echo "=== CRITICAL: Checking for WSL paths in built code ==="
        
        # Search for WSL paths in all built JavaScript files
        $wslPathFound = $false
        Get-ChildItem -Path build -Recurse -Filter "*.js" | ForEach-Object {
          $content = Get-Content $_.FullName -Raw
          if ($content -match "/mnt/[a-z]/") {
            Write-Host "ERROR: WSL path found in $($_.FullName)" -ForegroundColor Red
            $matches = [regex]::Matches($content, "/mnt/[a-z]/[^'`"]*")
            foreach ($match in $matches) {
              Write-Host "  Found: $($match.Value)" -ForegroundColor Yellow
            }
            $wslPathFound = $true
          }
        }
        
        if ($wslPathFound) {
          Write-Host "CRITICAL ERROR: WSL paths found in built code!" -ForegroundColor Red
          Write-Host "This will cause 'file not found' errors on Windows machines!" -ForegroundColor Red
          exit 1
        } else {
          Write-Host "SUCCESS: No WSL paths found in built code" -ForegroundColor Green
        }
        
        # Also check package.json and config files
        echo "=== Checking configuration files for WSL paths ==="
        Get-ChildItem -Path . -Include "*.json","*.js","*.ts" -Recurse | 
          Select-String -Pattern "/mnt/[a-z]/" | 
          ForEach-Object { 
            Write-Host "WARNING: WSL path in $($_.Path): $($_.Line)" -ForegroundColor Yellow 
          }
    
    - name: Collect diagnostic information
      if: failure()
      run: |
        echo "=== Package.json ==="
        type package.json
        
        echo "=== Build directory contents ==="
        dir build /s /b
        
        echo "=== Node modules check ==="
        if (Test-Path node_modules) {
          echo "node_modules exists"
          dir node_modules | Select-Object -First 20
        } else {
          echo "node_modules NOT FOUND"
        }
        
        echo "=== NPM config ==="
        npm config list
        
        echo "=== Global NPM packages ==="
        npm list -g --depth=0
    
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
        path: |
          test-results/
          *.log
          build/
        retention-days: 7

  test-windows-installation-methods:
    name: Test installation via ${{ matrix.installer }} on Windows
    runs-on: windows-latest
    
    strategy:
      fail-fast: false
      matrix:
        installer: [chocolatey, scoop, winget]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install Node.js via Chocolatey
      if: matrix.installer == 'chocolatey'
      run: |
        choco install nodejs -y
        refreshenv
    
    - name: Install Node.js via Scoop
      if: matrix.installer == 'scoop'
      shell: pwsh
      run: |
        iwr -useb get.scoop.sh | iex
        scoop install nodejs
    
    - name: Install Node.js via WinGet
      if: matrix.installer == 'winget'
      run: |
        winget install OpenJS.NodeJS --silent --accept-source-agreements --accept-package-agreements
        # Refresh PATH
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
    
    - name: Verify Node installation
      shell: pwsh
      run: |
        # Refresh environment variables
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        
        echo "Node version:"
        node --version
        echo "NPM version:"
        npm --version
    
    - name: Install and test MCP server
      shell: pwsh
      run: |
        npm ci
        npm run build
        npm test
    
    - name: Upload installer test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: installer-test-${{ matrix.installer }}
        path: |
          test-results/
          *.log

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-windows, test-windows-installation-methods]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Display test summary
      run: |
        echo "## Test Summary"
        echo "Windows tests completed"
        
        # Check for any test result files
        find . -name "*.log" -o -name "*.txt" | head -20
        
        echo "### Artifacts downloaded:"
        ls -la