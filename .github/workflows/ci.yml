name: CI/CD Pipeline - RoughCut MCP Server

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    name: Test & Coverage
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check platform compatibility
      run: node scripts/check-platform.js
      
    - name: Build project
      run: npm run build
      
    - name: Run unit tests
      run: npm test
      
    - name: Run integration tests
      run: node tests/integration-complete.js
      continue-on-error: true
      
    - name: Run coverage tests
      run: node tests/coverage-runner.js
      continue-on-error: true
      
    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check TypeScript types
      run: npx tsc --noEmit
      
    - name: Check code formatting
      run: npx prettier --check "src/**/*.ts" "tests/**/*.js"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build-artifacts:
    name: Build Distribution Artifacts
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Create distribution package
      run: npm pack
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ github.sha }}
        path: |
          build/
          *.tgz
        retention-days: 30

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run performance benchmarks
      run: node tests/performance-benchmarks.js
      continue-on-error: true
      
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results-${{ github.sha }}
        path: |
          test-*/performance-*.json
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-artifacts]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ github.sha }}
        
    - name: Deploy to staging environment
      run: echo "Would deploy to staging here"
      # Add actual staging deployment steps

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-artifacts]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ github.sha }}
        
    - name: Get version from package.json
      id: package-version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Check if version exists
      id: version-check
      run: |
        if git tag | grep -q "v${{ steps.package-version.outputs.version }}"; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      if: steps.version-check.outputs.exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.package-version.outputs.version }}
        release_name: Release v${{ steps.package-version.outputs.version }}
        body: |
          ## Changes
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ## Installation
          ```bash
          npm install rough-cut-mcp@${{ steps.package-version.outputs.version }}
          ```
          
          ## Files
          - `rough-cut-mcp-${{ steps.package-version.outputs.version }}.tgz` - NPM package
        draft: false
        prerelease: false

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, lint, security, build-artifacts]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "✅ All CI/CD checks passed!"
        echo "Build is ready for deployment"
        
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ CI/CD pipeline failed"
        echo "Test result: ${{ needs.test.result }}"
        echo "Lint result: ${{ needs.lint.result }}"
        echo "Security result: ${{ needs.security.result }}"